diff --git a/etc/builder.py b/etc/builder.py
index fddcbc9..62c6f4b 100644
--- a/etc/builder.py
+++ b/etc/builder.py
@@ -1,3 +1,5 @@
+from __future__ import print_function
+
 from iocbuilder import Device, AutoSubstitution, SetSimulation, Xml
 from iocbuilder.arginfo import *
 
@@ -85,8 +87,8 @@ class BPM_calc(AsynPort):
         MEMORY = Simple('Max memory to allocate, should be maxw*maxh*nbuffer for driver and all attached plugins', int))
 
     def Initialise(self):
-        print '# BPM_calcConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr, maxBuffers, maxMemory)' % self.__dict__
-        print 'BPM_calcConfigure("%(PORT)s", %(QUEUE)d, %(BLOCK)d, "%(NDARRAY_PORT)s", %(NDARRAY_ADDR)s, %(BUFFERS)d, %(MEMORY)d)' % self.__dict__
+        print('# BPM_calcConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr, maxBuffers, maxMemory)' % self.__dict__)
+        print('BPM_calcConfigure("%(PORT)s", %(QUEUE)d, %(BLOCK)d, "%(NDARRAY_PORT)s", %(NDARRAY_ADDR)s, %(BUFFERS)d, %(MEMORY)d)' % self.__dict__)
 
 @includesTemplates(NDPluginBaseTemplate)
 class _FFT_calc(AutoSubstitution):
@@ -116,8 +118,8 @@ class FFT_calc(AsynPort):
         MEMORY = Simple('Max memory to allocate, should be maxw*maxh*nbuffer for driver and all attached plugins', int))
 
     def Initialise(self):
-        print '# FFT_calcConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr, maxBuffers, maxMemory)' % self.__dict__
-        print 'FFT_calcConfigure("%(PORT)s", %(QUEUE)d, %(BLOCK)d, "%(NDARRAY_PORT)s", %(NDARRAY_ADDR)s, %(BUFFERS)d, %(MEMORY)d)' % self.__dict__
+        print('# FFT_calcConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr, maxBuffers, maxMemory)' % self.__dict__)
+        print('FFT_calcConfigure("%(PORT)s", %(QUEUE)d, %(BLOCK)d, "%(NDARRAY_PORT)s", %(NDARRAY_ADDR)s, %(BUFFERS)d, %(MEMORY)d)' % self.__dict__)
 
 @includesTemplates(NDPluginBaseTemplate)
 class _FFTInt_calc(AutoSubstitution):
@@ -147,8 +149,8 @@ class FFTInt_calc(AsynPort):
         MEMORY = Simple('Max memory to allocate, should be maxw*maxh*nbuffer for driver and all attached plugins', int))
 
     def Initialise(self):
-        print '# FFT_IntegrationConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr, maxBuffers, maxMemory)' % self.__dict__
-        print 'FFT_IntegrationConfigure("%(PORT)s", %(QUEUE)d, %(BLOCK)d, "%(NDARRAY_PORT)s", %(NDARRAY_ADDR)s, %(BUFFERS)d, %(MEMORY)d)' % self.__dict__
+        print('# FFT_IntegrationConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr, maxBuffers, maxMemory)' % self.__dict__)
+        print('FFT_IntegrationConfigure("%(PORT)s", %(QUEUE)d, %(BLOCK)d, "%(NDARRAY_PORT)s", %(NDARRAY_ADDR)s, %(BUFFERS)d, %(MEMORY)d)' % self.__dict__)
 
 
 @includesTemplates(NDPluginBaseTemplate)
@@ -184,8 +186,8 @@ class NDReframe(AsynPort):
         MEMORY    = Simple('Max memory to allocate, should be maxw*maxh*nbuffer '
                            'for driver and all attached plugins', int))                                                                        
     def Initialise(self):
-        print '# NDReframeConfigure(portName, queueSize, blockingCallbacks, '\
-            'NDArrayPort, NDArrayAddr, maxBuffers, maxMemory)'    
-        print 'NDReframeConfigure(' \
+        print('# NDReframeConfigure(portName, queueSize, blockingCallbacks, '\
+            'NDArrayPort, NDArrayAddr, maxBuffers, maxMemory)')
+        print('NDReframeConfigure(' \
             '"%(PORT)s", %(QUEUE)d, %(BLOCK)d, "%(NDARRAY_PORT)s", ' \
-            '"%(NDARRAY_ADDR)s", %(BUFFERS)d, %(MEMORY)d)' % self.__dict__
+            '"%(NDARRAY_ADDR)s", %(BUFFERS)d, %(MEMORY)d)' % self.__dict__)
